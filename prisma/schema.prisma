// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  address       String?
  inventoryLink String?
  password      String
  products      Product[] // One-to-many relationship with Product
  sales         Sale[] // One-to-many relationship with Sale
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum ProductCategory {
  Beverages
  Electronics
  GeneralRF
  GeneralGB
  Grocery
  RawMaterials
}

enum Region {
  North
  South
  East
  West
}

enum Season {
  Monsoon
  Winter
  Summer
}

model Product {
  id                  String          @id @default(cuid())
  name                String
  description         String?         @db.Text
  category            ProductCategory
  subCategory         String
  season              Season
  region              Region
  warehouseId         Int
  leadtime            Int
  supplierReliability Float
  transportCost       Float
  promotion           Float
  brand               String?
  totalSold           Int             @default(0)
  stock               Int             @default(0)
  reorderPoint        Int             @default(10)
  supplierAddress     String
  supplierName        String?
  supplierContact     String?
  sellingPrice        Float
  costPrice           Float
  taxRate             Float           @default(0)
  weight              Float? // in grams
  dimensions          String? // format: "LxWxH" in cm
  isActive            Boolean         @default(true)
  isFeatured          Boolean         @default(false)
  image               String // URLs to product images
  organization        Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId      String
  sales               Sale[] // One-to-many relationship with Sale
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  lastRestockedAt     DateTime?
  expiryDate          DateTime? // For perishable items

  @@index([organizationId])
  @@index([category])
  @@index([isActive])
  @@index([isFeatured])
}

// Actual sales transactions
model Sale {
  id             String       @id @default(cuid())
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  quantity       Int
  unitPrice      Float // Price per unit at the time of sale
  totalAmount    Float // Total amount including tax
  taxAmount      Float // Tax amount
  profit         Float // Profit from this sale
  saleDate       DateTime // When the sale occurred
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([productId])
  @@index([organizationId])
  @@index([saleDate])
}

// Materialized view for aggregated sales data
model SalesAggregate {
  id             String     @id @default(cuid())
  productId      String
  organizationId String
  periodType     PeriodType
  periodStart    DateTime
  periodEnd      DateTime
  totalQuantity  Int
  totalRevenue   Float
  totalProfit    Float
  averagePrice   Float
  lastUpdated    DateTime   @default(now())

  @@unique([productId, periodType, periodStart])
  @@index([productId])
  @@index([organizationId])
  @@index([periodType])
  @@index([periodStart])
}

enum PeriodType {
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}
